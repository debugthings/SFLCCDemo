//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFLCC_Performance_Test
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    [DeploymentItem("sflcc performance test\\searchterms.csv", "sflcc performance test")]
    [DataSource("SearchTerms", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\sflcc performance test\\searchterms.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Random, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "searchterms#csv")]
    [DataBinding("SearchTerms", "searchterms#csv", "Term", "SearchTerms.searchterms#csv.Term")]
    [IncludeCodedWebTest("SFLCC_Performance_Test.NavigateToSpeakersCoded", "sflcc performance test.dll")]
    public class AgendaWithMultiSearchDBProbabilityAndExtractCodedsxd : WebTest
    {

        public AgendaWithMultiSearchDBProbabilityAndExtractCodedsxd()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest("http://sflccdemowebsite.azurewebsites.net/");
            request1.ThinkTime = 15;
            WebTestRequest request1Dependent1 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/IczWvq5y_Cwwv_rBjOtT0w.woff");
            request1Dependent1.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/"));
            request1.DependentRequests.Add(request1Dependent1);
            WebTestRequest request1Dependent2 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/1ImRNPx4870-D9a1EBUdPBsxEYwM7FgeyaSgU71cLG0" +
                    ".woff");
            request1Dependent2.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/"));
            request1.DependentRequests.Add(request1Dependent2);
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest("http://sflccdemowebsite.azurewebsites.net/Home/Agenda");
            request2.ThinkTime = 60;
            request2.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/"));
            WebTestRequest request2Dependent1 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/IczWvq5y_Cwwv_rBjOtT0w.woff");
            request2Dependent1.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
            request2.DependentRequests.Add(request2Dependent1);
            WebTestRequest request2Dependent2 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/1ImRNPx4870-D9a1EBUdPBsxEYwM7FgeyaSgU71cLG0" +
                    ".woff");
            request2Dependent2.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
            request2.DependentRequests.Add(request2Dependent2);
            yield return request2;
            request2 = null;

            CountingLoopRule conditionalRule1 = new CountingLoopRule();
            conditionalRule1.ContextParameterName = "LoopCounter";
            conditionalRule1.IterationsCount = 10D;

            int maxIterations1 = 10;
            bool advanceDataCursors1 = true;
            this.BeginLoop(conditionalRule1, maxIterations1, advanceDataCursors1);
            this.RegisterDataSourceInLoop(conditionalRule1, "SearchTerms", "searchterms#csv");

            for (; this.ExecuteConditionalRule(conditionalRule1); )
            {
                WebTestRequest request3 = new WebTestRequest("http://sflccdemowebsite.azurewebsites.net/Home/Agenda");
                request3.ThinkTime = 20;
                request3.Method = "POST";
                request3.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                FormPostHttpBody request3Body = new FormPostHttpBody();
                request3Body.FormPostParameters.Add("searchstring", this.Context["SearchTerms.searchterms#csv.Term"].ToString());
                request3.Body = request3Body;
                WebTestRequest request3Dependent1 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/IczWvq5y_Cwwv_rBjOtT0w.woff");
                request3Dependent1.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                request3.DependentRequests.Add(request3Dependent1);
                WebTestRequest request3Dependent2 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/1ImRNPx4870-D9a1EBUdPBsxEYwM7FgeyaSgU71cLG0" +
                        ".woff");
                request3Dependent2.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                request3.DependentRequests.Add(request3Dependent2);
                ExtractAttributeValue extractionRule1 = new ExtractAttributeValue();
                extractionRule1.TagName = "a";
                extractionRule1.AttributeName = "href";
                extractionRule1.MatchAttributeName = "";
                extractionRule1.MatchAttributeValue = "";
                extractionRule1.HtmlDecode = true;
                extractionRule1.Required = true;
                extractionRule1.Index = 22;
                extractionRule1.ContextParameterName = "LinkToNavigate";
                request3.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
                yield return request3;
                request3 = null;
            }

            this.EndLoop(conditionalRule1);

            StringComparisonRule conditionalRule2 = new StringComparisonRule();
            conditionalRule2.ContextParameterName = "LinkToNavigate";
            conditionalRule2.ComparisonOperator = StringComparisonOperator.Inequality;
            conditionalRule2.Value = "";
            conditionalRule2.IgnoreCase = true;
            conditionalRule2.UseRegularExpression = false;

            this.BeginCondition(conditionalRule2);

            if (this.ExecuteConditionalRule(conditionalRule2))
            {
                StringComparisonRule conditionalRule3 = new StringComparisonRule();
                conditionalRule3.ContextParameterName = "LinkToNavigate";
                conditionalRule3.ComparisonOperator = StringComparisonOperator.Inequality;
                conditionalRule3.Value = "http://www.debugthings.com";
                conditionalRule3.IgnoreCase = true;
                conditionalRule3.UseRegularExpression = false;

                this.BeginCondition(conditionalRule3);

                if (this.ExecuteConditionalRule(conditionalRule3))
                {
                    WebTestRequest request4 = new WebTestRequest(("http://sflccdemowebsite.azurewebsites.net" + this.Context["LinkToNavigate"].ToString()));
                    request4.ThinkTime = 20;
                    request4.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                    WebTestRequest request4Dependent1 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/IczWvq5y_Cwwv_rBjOtT0w.woff");
                    request4Dependent1.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                    request4.DependentRequests.Add(request4Dependent1);
                    WebTestRequest request4Dependent2 = new WebTestRequest("http://fonts.gstatic.com/s/raleway/v9/1ImRNPx4870-D9a1EBUdPBsxEYwM7FgeyaSgU71cLG0" +
                            ".woff");
                    request4Dependent2.Headers.Add(new WebTestRequestHeader("Referer", "http://sflccdemowebsite.azurewebsites.net/Home/Agenda"));
                    request4.DependentRequests.Add(request4Dependent2);
                    this.PostRequest += AgendaWithMultiSearchDBProbabilityAndExtractCodedsxd_PostRequest;
                    yield return request4;
                    request4 = null;
                }

                this.EndCondition(conditionalRule3);
            }

            this.EndCondition(conditionalRule2);

            foreach (WebTestRequest r in IncludeWebTest(new SFLCC_Performance_Test.NavigateToSpeakersCoded(), false)) { yield return r; };


        }

        // This code was created after the session to answer a question
        void AgendaWithMultiSearchDBProbabilityAndExtractCodedsxd_PostRequest(object sender, PostRequestEventArgs e)
        {
            var listofRequests = new List<WebTestRequest>();
            foreach (var req in e.Request.DependentRequests)
            {
                if (req.Url.Contains("jquery"))
                {
                    listofRequests.Add(req);
                }
            }
            foreach (var deadreq in listofRequests)
            {
                e.Request.DependentRequests.Remove(deadreq);
            }

        }

    }
}
