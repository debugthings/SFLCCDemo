//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFLCC_Performance_Test
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    public class NavigateToSpeakersCoded : WebTest
    {

        public NavigateToSpeakersCoded()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }
            int divisor = 1;
            if (this.Context.ContainsKey("LTDIVIDE"))
            {
                int.TryParse(this.Context["LTDIVIDE"].ToString(), out divisor);
            }

            if (!this.Context.ContainsKey("HostAdress"))
            {
                this.Context.Add("HostAdress", "sflcc.cloudapp.net");
            }

            BeginTransaction("Navigate to Homepage");
            WebTestRequest request1 = new WebTestRequest("http://"+ this.Context["HostAddress"] +"/");
            request1.ThinkTime = 9 / divisor;
            yield return request1;
            request1 = null;
            EndTransaction("Navigate to Homepage");

            BeginTransaction("Navigate To Speakers");
            WebTestRequest request2 = new WebTestRequest("http://"+ this.Context["HostAddress"] +"/Home/Speakers");
            request2.ThinkTime = 23 / divisor;
            request2.Headers.Add(new WebTestRequestHeader("Referer", "http://"+ this.Context["HostAddress"] +"/"));

            CustomLinkExtraction ex1 = new CustomLinkExtraction();
            ex1.ContextParameterName = "CustomLinks";
            ex1.ReturnRandom = true;
            ex1.ExtractionPattern = "/Home/Speaker";

            request2.ExtractValues += ex1.Extract;

            yield return request2;
            EndTransaction("Navigate To Speakers");
            request2 = null;
            
            /*
             * Same effect as using a probability rule just less WebTest Specifics
             */
            int RandPercent = new Random().Next(0, 100);
            if (RandPercent > 50)
            {
                if (!string.IsNullOrEmpty(this.Context["CustomLinks"].ToString()))
                {
                    BeginTransaction("View Speaker Details");
                    WebTestRequest request3 = new WebTestRequest("http://"+ this.Context["HostAddress"] +"" + this.Context["CustomLinks"].ToString());
                    request3.Headers.Add(new WebTestRequestHeader("Referer", "http://"+ this.Context["HostAddress"] +"/Home/Speakers"));
                    yield return request3;
                    request3 = null;
                    EndTransaction("View Speaker Details");
                }
            }


        }
    }
}
